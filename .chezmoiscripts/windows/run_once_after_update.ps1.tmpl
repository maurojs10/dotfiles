if ((Get-ExecutionPolicy -Scope CurrentUser) -eq 'Undefined') {
  Write-Output "`n * * Set PowerShell execution policy for the current user * * `n"
  Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
}

if (!(Test-Path $PROFILE)) {
  if (!(Test-Path (Split-Path -Path $PROFILE))) {
    Write-Output "`n * * Create PowerShell profile folder * * `n"
    New-Item -Path (Split-Path -Path $PROFILE) -ItemType Directory | Out-Null
  }

  Write-Output "`n * * Add PowerShell profile script * * `n"
  New-Item -Path $PROFILE -ItemType File | Out-Null
}

$ChocolateyProfileInstall = @'
$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
if (Test-Path $ChocolateyProfile) {
  Import-Module $ChocolateyProfile
}
'@
if (!(Select-String $PROFILE -Pattern '$ChocolateyProfile' -Quiet -SimpleMatch)) {
  Write-Output "`n * * Configure Chocolatey in PowerShell profile script * * `n"
  $ChocolateyProfileInstall | Out-File $PROFILE -Append -Encoding utf8
}

$ChocolateyProfile = "$env:ProgramData\chocolatey\helpers\chocolateyProfile.psm1"
if (Test-Path $ChocolateyProfile) {
  Write-Output "`n * * Load Chocolatey profile module * * `n"
  Import-Module $ChocolateyProfile
}

$ChocolateyInstaller = "$env:ProgramData\chocolatey\helpers\chocolateyInstaller.psm1"
if (Test-Path $ChocolateyInstaller) {
  Write-Output "`n * * Load Chocolatey installer module * * `n"
  Import-Module $ChocolateyInstaller
}

if (!(Test-Path 'C:\Tools')) {
  Write-Output "`n * * Create folder for tools installed by Chocolatey * * `n"
  New-Item -Path 'C:\Tools' -ItemType Directory | Out-Null
}

if (!(Get-Command gsudo -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install gsudo * * `n"
  Start-Process choco 'install gsudo -y' -Verb RunAs -Wait
  refreshenv
}

Write-Output "`n * * Start gsudo cache for the current session * * `n"
gsudo cache on --duration -1

if ((gsudo config CacheMode) -ne 'CacheMode = "Auto"') {
  Write-Output "`n * * Configure gsudo cache mode * * `n"
  gsudo config CacheMode Auto
}

if ((gsudo config PathPrecedence) -ne 'PathPrecedence = "True"') {
  Write-Output "`n * * Configure gsudo path precedence * * `n"
  gsudo config PathPrecedence True
}

if (!(choco feature list | Select-String '^\[x\] allowGlobalConfirmation\b')) {
  Write-Output "`n * * Configure Chocolatey to bypass confirmations * * `n"
  sudo choco feature enable -n allowGlobalConfirmation
}

if (!(choco feature list | Select-String '^\[x\] useRememberedArgumentsForUpgrades\b')) {
  Write-Output "`n * * Configure Chocolatey to use installation arguments for upgrades * * `n"
  sudo choco feature enable -n useRememberedArgumentsForUpgrades
}

if (!(Test-Path '{{ .ssh.keyfile }}')) {
  if (!(Test-Path (Split-Path -Path '{{ .ssh.keyfile }}'))) {
    Write-Output "`n * * Create SSH folder * * `n"
    New-Item -Path (Split-Path -Path '{{ .ssh.keyfile }}') -ItemType Directory | Out-Null
  }

  Write-Output "`n * * Generate SSH key * * `n"
  ssh-keygen -f '{{ .ssh.keyfile }}' -t '{{ .ssh.keytype }}' -C '{{ .chezmoi.hostname | lower }}' -N '""'
}

if (!(Get-Command git -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Git * * `n"
  sudo choco install git -y
  refreshenv
}

if (!(git extras --version)) {
  Write-Output "`n * * Install Git Extras * * `n"
  $path = Join-Path $env:TEMP (New-Guid)
  git clone 'https://github.com/tj/git-extras.git' $path
  Push-Location $path
  git checkout (git describe --tags (git rev-list --tags --max-count=1))
  sudo .\install.cmd
  Pop-Location
  Remove-Item $path -Force -Recurse
}

if (!(Get-Command TortoiseGitProc -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install TortoiseGit * * `n"
  sudo choco install tortoisegit -y
  refreshenv
}

if ((Get-ItemProperty -Path HKCU:\SOFTWARE\TortoiseGit -ErrorAction SilentlyContinue).Win8SpellChecker -ne 1) {
  Write-Output "`n * * Configure TortoiseGit spell checker * * `n"
  Set-ItemProperty -Path HKCU:\SOFTWARE\TortoiseGit -Name Win8SpellChecker -Value 1
}

if (!(Get-Command micro -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install micro * * `n"
  sudo choco install micro -y
}

if (!(Get-Command code -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Visual Studio Code * * `n"
  sudo choco install vscode -y
  refreshenv
}

if (!(Get-Command gh -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install GitHub CLI * * `n"
  sudo choco install gh -y
  refreshenv
}

gh auth status -h github.com | Out-Null ; if ($LASTEXITCODE -ne 0) {
  Write-Output "`n * * Authenticate with GitHub * * `n"
  gh auth login -h github.com -p ssh --scopes "admin:public_key admin:ssh_signing_key gist read:org repo" --skip-ssh-key
}

Write-Output "`n * * Add SSH key to GitHub for authentication * * `n"
gh ssh-key add '{{ .ssh.publickey }}' --type authentication

Write-Output "`n * * Add SSH key to GitHub for signing * * `n"
gh ssh-key add '{{ .ssh.publickey }}' --type signing

Write-Output "`n * * Update allowed signers from GitHub * * `n"
$GH_USER = (gh api user --jq '.login')
gh api "users/$GH_USER/ssh_signing_keys" --paginate --jq '.[].key' | Out-File '{{ .ssh.allowedSigners }}' -Encoding utf8

if (!(Test-Path "$env:SystemRoot\Fonts\CaskaydiaMonoNerdFont-Regular.ttf")) {
  Write-Output "`n * * Install Nerd Fonts CaskaydiaMono * * `n"
  sudo choco install nerd-fonts-cascadiamono -y
}

if (!(Get-Command starship -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Starship * * `n"
  sudo choco install starship -y
}

if (!(Test-Path "$env:USERPROFILE\source")) {
  Write-Output "`n * * Create folder for source code subfolders * * `n"
  New-Item -Path "$env:USERPROFILE\source" -ItemType Directory | Out-Null
}

if (!(Test-Path "$env:USERPROFILE\source\repos")) {
  Write-Output "`n * * Create subfolder for source code repositories * * `n"
  New-Item -Path "$env:USERPROFILE\source\repos" -ItemType Directory | Out-Null
}

Write-Output "`n * * Set environment variables for WSL * * `n"
setx WSLENV USERPROFILE/up

exit 0
