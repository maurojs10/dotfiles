if ((Get-ExecutionPolicy -Scope CurrentUser) -eq 'Undefined') {
  Write-Output "`n * * Set PowerShell execution policy for the current user * * `n"
  Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
}

if (!(Test-Path $PROFILE)) {
  if (!(Test-Path (Split-Path -Path $PROFILE))) {
    Write-Output "`n * * Create PowerShell profile folder * * `n"
    New-Item -Path (Split-Path -Path $PROFILE) -ItemType Directory | Out-Null
  }

  Write-Output "`n * * Add PowerShell profile script * * `n"
  New-Item -Path $PROFILE -ItemType File | Out-Null
}

$ChocolateyProfileInstall = @'
$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
if (Test-Path $ChocolateyProfile) {
  Import-Module $ChocolateyProfile
}
'@
if (!(Select-String $PROFILE -Pattern '$ChocolateyProfile' -Quiet -SimpleMatch)) {
  Write-Output "`n * * Configure Chocolatey in PowerShell profile script * * `n"
  $ChocolateyProfileInstall | Out-File $PROFILE -Append -Encoding utf8
}

$ChocolateyProfile = "$env:ProgramData\chocolatey\helpers\chocolateyProfile.psm1"
if (Test-Path $ChocolateyProfile) {
  Write-Output "`n * * Load Chocolatey profile module * * `n"
  Import-Module $ChocolateyProfile
}

$ChocolateyInstaller = "$env:ProgramData\chocolatey\helpers\chocolateyInstaller.psm1"
if (Test-Path $ChocolateyInstaller) {
  Write-Output "`n * * Load Chocolatey installer module * * `n"
  Import-Module $ChocolateyInstaller
}

if (!(Test-Path 'C:\Tools')) {
  Write-Output "`n * * Create folder for tools installed by Chocolatey * * `n"
  New-Item -Path 'C:\Tools' -ItemType Directory | Out-Null
}

if (!(Get-Command gsudo -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install gsudo * * `n"
  Start-Process choco 'install gsudo -y' -Verb RunAs -Wait
  refreshenv
}

Write-Output "`n * * Start gsudo cache for the current session * * `n"
gsudo cache on --duration -1

if ((gsudo config CacheMode) -ne 'CacheMode = "Auto"') {
  Write-Output "`n * * Configure gsudo cache mode * * `n"
  gsudo config CacheMode Auto
}

if ((gsudo config PathPrecedence) -ne 'PathPrecedence = "True"') {
  Write-Output "`n * * Configure gsudo path precedence * * `n"
  gsudo config PathPrecedence True
}

if (!(choco feature list | Select-String '^\[x\] allowGlobalConfirmation\b')) {
  Write-Output "`n * * Configure Chocolatey to bypass confirmations * * `n"
  sudo choco feature enable -n allowGlobalConfirmation
}

if (!(choco feature list | Select-String '^\[x\] useRememberedArgumentsForUpgrades\b')) {
  Write-Output "`n * * Configure Chocolatey to use installation arguments for upgrades * * `n"
  sudo choco feature enable -n useRememberedArgumentsForUpgrades
}

if (!(Test-Path '{{ .ssh.keyfile }}')) {
  if (!(Test-Path (Split-Path -Path '{{ .ssh.keyfile }}'))) {
    Write-Output "`n * * Create SSH folder * * `n"
    New-Item -Path (Split-Path -Path '{{ .ssh.keyfile }}') -ItemType Directory | Out-Null
  }

  Write-Output "`n * * Generate SSH key * * `n"
  ssh-keygen -f '{{ .ssh.keyfile }}' -t '{{ .ssh.keytype }}' -C '{{ .chezmoi.hostname | lower }}' -N '""'
}

if (!(Get-Command git -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Git * * `n"
  sudo choco install git -y
  refreshenv
}

if (!(git extras --version)) {
  Write-Output "`n * * Install Git Extras * * `n"
  $path = Join-Path $env:TEMP (New-Guid)
  git clone 'https://github.com/tj/git-extras.git' $path
  Push-Location $path
  git checkout (git describe --tags (git rev-list --tags --max-count=1))
  sudo .\install.cmd
  Pop-Location
  Remove-Item $path -Force -Recurse
}

if (!(Get-Command TortoiseGitProc -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install TortoiseGit * * `n"
  sudo choco install tortoisegit -y
  refreshenv
}

if ((Get-ItemProperty -Path HKCU:\SOFTWARE\TortoiseGit -ErrorAction SilentlyContinue).Win8SpellChecker -ne 1) {
  Write-Output "`n * * Configure TortoiseGit spell checker * * `n"
  Set-ItemProperty -Path HKCU:\SOFTWARE\TortoiseGit -Name Win8SpellChecker -Value 1
}

if (!(Get-Command micro -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install micro * * `n"
  sudo choco install micro -y
}

if (!(Get-Command code -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Visual Studio Code * * `n"
  sudo choco install vscode -y
  refreshenv
}

if (!(Get-Command gh -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install GitHub CLI * * `n"
  sudo choco install gh -y
  refreshenv
}

gh auth status -h github.com | Out-Null ; if ($LASTEXITCODE -ne 0) {
  Write-Output "`n * * Authenticate with GitHub * * `n"
  gh auth login -h github.com -p ssh --scopes "admin:public_key admin:ssh_signing_key gist read:org repo" --skip-ssh-key
}

Write-Output "`n * * Add SSH key to GitHub for authentication * * `n"
gh ssh-key add '{{ .ssh.publickey }}' --type authentication

Write-Output "`n * * Add SSH key to GitHub for signing * * `n"
gh ssh-key add '{{ .ssh.publickey }}' --type signing

Write-Output "`n * * Update allowed signers from GitHub * * `n"
$GH_USER = (gh api user --jq '.login')
gh api "users/$GH_USER/ssh_signing_keys" --paginate --jq '.[].key' | Out-File '{{ .ssh.allowedSigners }}' -Encoding utf8

if (!(Test-Path "$env:SystemRoot\Fonts\CaskaydiaMonoNerdFont-Regular.ttf")) {
  Write-Output "`n * * Install Nerd Fonts CaskaydiaMono * * `n"
  sudo choco install nerd-fonts-cascadiamono -y
}

if (!(Get-Command starship -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Starship * * `n"
  sudo choco install starship -y
}

if (!(Test-Path "$env:USERPROFILE\source")) {
  Write-Output "`n * * Create folder for source code subfolders * * `n"
  New-Item -Path "$env:USERPROFILE\source" -ItemType Directory | Out-Null
}

if (!(Test-Path "$env:USERPROFILE\source\repos")) {
  Write-Output "`n * * Create subfolder for source code repositories * * `n"
  New-Item -Path "$env:USERPROFILE\source\repos" -ItemType Directory | Out-Null
}

Write-Output "`n * * Set environment variables for WSL * * `n"
setx WSLENV USERPROFILE/up

if (!(Get-PackageProvider NuGet -ListAvailable -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install NuGet PowerShell package provider * * `n"
  sudo Install-PackageProvider NuGet -Force
}

if (!(Get-Module PSScriptAnalyzer -ListAvailable)) {
  Write-Output "`n * * Install PSScriptAnalyzer PowerShell module * * `n"
  sudo Install-Module PSScriptAnalyzer -Force
}

if (!(Get-Command 7z -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install 7-Zip * * `n"
  sudo choco install 7zip -y
}

if (!(Get-Command node -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Node.js * * `n"
  sudo choco install nodejs-lts -y
  refreshenv
}

if (!(Get-Command eclint.cmd -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install ECLint * * `n"
  npm install eclint --global
}

if (!(Get-Command conventional-changelog.cmd -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Conventional Changelog CLI * * `n"
  npm install conventional-changelog-cli --global
}

if (!(Get-Command svgo.cmd -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install SVGO * * `n"
  npm install svgo --global
}

if (!(Get-Command msys2 -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install MSYS2 * * `n"
  sudo choco install msys2 --params '/NoUpdate' -y
  refreshenv
}

if (!(Get-Command ruby -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Ruby * * `n"
  sudo choco install ruby -y
  refreshenv
  sudo ridk install 2 3
}

if (!(Get-Command bootstrap-email.bat -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Bootstrap Email * * `n"
  sudo gem install bootstrap-email
}

if (Test-Path "$env:LOCALAPPDATA\Microsoft\WindowsApps\python.exe") {
  Write-Output "`n * * Disable Python App Execution Alias (1) * * `n"
  Remove-Item "$env:LOCALAPPDATA\Microsoft\WindowsApps\python.exe" -Force
}

if (Test-Path "$env:LOCALAPPDATA\Microsoft\WindowsApps\python3.exe") {
  Write-Output "`n * * Disable Python App Execution Alias (2) * * `n"
  Remove-Item "$env:LOCALAPPDATA\Microsoft\WindowsApps\python3.exe" -Force
}

if (!(Get-Command python -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Python * * `n"
  sudo choco install python310 --params '/InstallDir:C:\Python310' -y
  refreshenv
}

if (!(Get-Command mssql-scripter.bat -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install MSSQL Scripter * * `n"
  sudo pip install mssql-scripter
}

if (!(Get-Command sed -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install GNU Sed * * `n"
  sudo choco install sed -y
}

if (!(Get-Command magick -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install ImageMagick * * `n"
  sudo choco install imagemagick -y
}

if (!(Get-Command pngquant -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install PNGQuant * * `n"
  sudo choco install pngquant -y
}

if (!(Get-Command nuget -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install NuGet CLI * * `n"
  sudo choco install nuget.commandline -y
}

if (!(Get-Command vswhere -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Visual Studio Locator * * `n"
  sudo choco install vswhere -y
}

$path = (vswhere -latest -find 'Common7\**\VsDevCmd.bat')
if ([string]::IsNullOrWhiteSpace($path) -or !(Test-Path $path)) {
  Write-Output "`n * * Install Visual Studio * * `n"
  sudo choco install visualstudio2022community -y
  refreshenv
}

$path = (vswhere -latest -requires Microsoft.VisualStudio.Workload.ManagedDesktop -property installationPath)
if ([string]::IsNullOrWhiteSpace($path) -or !(Test-Path $path)) {
  Write-Output "`n * * Install Visual Studio Desktop Development workload * * `n"
  sudo choco install visualstudio2022-workload-manageddesktop -y
}

$path = (vswhere -latest -requires Microsoft.VisualStudio.Workload.NetWeb -property installationPath)
if ([string]::IsNullOrWhiteSpace($path) -or !(Test-Path $path)) {
  Write-Output "`n * * Install Visual Studio Web Development workload * * `n"
  sudo choco install visualstudio2022-workload-netweb -y
}

$path = (vswhere -latest -find 'Common7\**\Mvc4')
if ([string]::IsNullOrWhiteSpace($path) -or !(Test-Path $path)) {
  Write-Output "`n * * Install Visual Studio MVC 4 component * * `n"
  $installationPath = (vswhere -latest -property installationPath)
  sudo Start-Process `
    -FilePath "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\setup.exe" `
    -ArgumentList "modify --installPath """"$installationPath"""" --add Microsoft.VisualStudio.Web.Mvc4.ComponentGroup --quiet --norestart" `
    -Wait `
    -NoNewWindow
}

$path = (vswhere -latest -find 'Common7\**\DisableOutOfProcBuild.exe')
if ([string]::IsNullOrWhiteSpace($path) -or !(Test-Path $path)) {
  Write-Output "`n * * Download Visual Studio Installer Projects extension * * `n"
  Invoke-WebRequest `
    -Uri 'https://marketplace.visualstudio.com/_apis/public/gallery/publishers/VisualStudioClient/vsextensions/MicrosoftVisualStudio2022InstallerProjects/latest/vspackage' `
    -OutFile "$env:USERPROFILE\Downloads\MicrosoftVisualStudio2022InstallerProjects.vsix"

  Write-Output "`n * * Install Visual Studio Installer Projects extension * * `n"
  $installerPath = (vswhere -latest -find 'Common7\**\VSIXInstaller.exe')
  sudo Start-Process `
    -FilePath $installerPath `
    -ArgumentList """""$env:USERPROFILE\Downloads\MicrosoftVisualStudio2022InstallerProjects.vsix"""" /quiet" `
    -Wait `
    -NoNewWindow

  Write-Output "`n * * Remove Visual Studio Installer Projects extension downloaded file * * `n"
  Remove-Item "$env:USERPROFILE\Downloads\MicrosoftVisualStudio2022InstallerProjects.vsix" -Force
}

$path = "${env:ProgramFiles(x86)}\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools"
if (!(Test-Path $path)) {
  Write-Output "`n * * Install .NET Framework Developer Pack * * `n"
  sudo choco install netfx-4.8-devpack -y
}

$path = "${env:ProgramFiles(x86)}\dennisbabkin.com\Script Encoder Plus\screnc.exe"
if (!(Test-Path $path)) {
  Write-Output "`n * * Download Script Encoder Plus * * `n"
  Invoke-WebRequest `
    -Uri 'https://dennisbabkin.com/php/download.php?go=ScrEnc' `
    -OutFile "$env:USERPROFILE\Downloads\ScrEnc.zip"

  Write-Output "`n * * Extract Script Encoder Plus * * `n"
  Expand-Archive `
    -Path "$env:USERPROFILE\Downloads\ScrEnc.zip" `
    -DestinationPath "$env:USERPROFILE\Downloads\"

  Write-Output "`n * * Install Script Encoder Plus * * `n"
  sudo Start-Process `
    -FilePath "$env:windir\System32\msiexec.exe" `
    -ArgumentList "/i """"$env:USERPROFILE\Downloads\ScrEnc Encoder 3.0.3.9.msi"""" /qn /norestart" `
    -Wait `
    -NoNewWindow

  Write-Output "`n * * Register Script Encoder Plus * * `n"
  $registrationName = Read-Host 'Enter registration name'
  $registrationCode = Read-Host 'Enter registration code'
  Start-Process `
    -FilePath "${env:ProgramFiles(x86)}\dennisbabkin.com\Script Encoder Plus\screnc.exe" `
    -ArgumentList "/r=""$registrationName"" /c=""$registrationCode""" `
    -Wait `
    -NoNewWindow

  Write-Output "`n * * Remove Script Encoder Plus downloaded file * * `n"
  Remove-Item "$env:USERPROFILE\Downloads\ScrEnc.zip" -Force

  Write-Output "`n * * Remove Script Encoder Plus extracted files * * `n"
  Remove-Item "$env:USERPROFILE\Downloads\ScrEnc Encoder 3.0.3.9.msi" -Force
  Remove-Item "$env:USERPROFILE\Downloads\Info - Encoder.txt" -Force
}

$path = 'C:\Tools\Invoke-Stealth'
if (!(Test-Path $path)) {
  Write-Output "`n * * Install Invoke-Stealth * * `n"
  git clone 'https://github.com/JoelGMSec/Invoke-Stealth.git' $path
}

$path = 'C:\Tools\Invoke-Stealth'
if (!($env:Path -split ';' -contains $path)) {
  Write-Output "`n * * Add Invoke-Stealth to current user path * * `n"
  Install-ChocolateyPath $path -PathType User
}

exit 0
