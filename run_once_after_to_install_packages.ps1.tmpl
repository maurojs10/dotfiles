{{ if eq .chezmoi.os "windows" -}}
#Requires -RunAsAdministrator

Write-Output "`n * * Set PowerShell execution policy for scripts * * `n"
Set-ExecutionPolicy RemoteSigned -Scope Process -Force
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

Write-Output "`n * * Add PowerShell profile script * * `n"
If (!(Test-Path (Split-Path -Path $PROFILE))) { New-Item -Path (Split-Path -Path $PROFILE) -ItemType Directory | Out-Null }
If (!(Test-Path $PROFILE)) { New-Item -Path $PROFILE -ItemType File | Out-Null }

Write-Output "`n * * Configure Chocolatey in PowerShell profile script * * `n"
$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
$ChocolateyProfileInstall = @'
$ChocolateyProfile = "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
if (Test-Path $ChocolateyProfile) {
  Import-Module $ChocolateyProfile
}
'@
if (!(Select-String $PROFILE -Pattern '$ChocolateyProfile' -Quiet -SimpleMatch)) {
  $ChocolateyProfileInstall | Out-File $PROFILE -Append -Encoding utf8
  Import-Module $ChocolateyProfile
}

Write-Output "`n * * Configure Chocolatey to bypass confirmations * * `n"
choco feature enable -n allowGlobalConfirmation

Write-Output "`n * * Configure Chocolatey to use installation arguments for upgrades * * `n"
choco feature enable -n useRememberedArgumentsForUpgrades

If (!(Test-Path '{{ .ssh.keyfile }}')) {
  If (!(Test-Path (Split-Path -Path '{{ .ssh.keyfile }}'))) { 
    Write-Output "`n * * Create SSH folder * * `n"
    New-Item -Path (Split-Path -Path '{{ .ssh.keyfile }}') -ItemType Directory | Out-Null
  }

  Write-Output "`n * * Generate SSH key * * `n"
  ssh-keygen -f '{{ .ssh.keyfile }}' -t '{{ .ssh.keytype }}' -C '{{ .chezmoi.hostname }}' -N '""'
}

if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Git * * `n"
  choco install git
  refreshenv
}

if (-not (Get-Command micro -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install micro * * `n"
  choco install micro
}

if (-not (Get-Command code -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Visual Studio Code * * `n"
  choco install vscode
  refreshenv
}

if (-not (Get-Command gh -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install GitHub CLI * * `n"
  choco install gh
  refreshenv
}

Write-Output "`n * * Authenticate with GitHub * * `n"
gh auth login --scopes "admin:public_key admin:ssh_signing_key gist read:org repo"

Write-Output "`n * * Add SSH key to GitHub for authentication * * `n"
gh ssh-key add '{{ .ssh.publickey }}' --type authentication

Write-Output "`n * * Add SSH key to GitHub for signing * * `n"
gh ssh-key add '{{ .ssh.publickey }}' --type signing

if (!(Test-Path "$env:SystemRoot\Fonts\CaskaydiaMonoNerdFont-Regular.ttf")) {
  Write-Output "`n * * Install Nerd Fonts CaskaydiaMono * * `n"
  choco install nerd-fonts-cascadiamono
}

if (-not (Get-Command starship -ErrorAction SilentlyContinue)) {
  Write-Output "`n * * Install Starship * * `n"
  choco install starship
}

Write-Output "`n * * Finished installing packages * * `n"

Write-Output "`n * * Create folder for source code subfolders * * `n"
If (!(Test-Path "$env:USERPROFILE\source")) {
  New-Item -Path "$env:USERPROFILE\source" -ItemType Directory | Out-Null
}

Write-Output "`n * * Create subfolder for source code repositories * * `n"
If (!(Test-Path "$env:USERPROFILE\source\repos")) {
  New-Item -Path "$env:USERPROFILE\source\repos" -ItemType Directory | Out-Null
}

Write-Output "`n * * Set environment variables for WSL * * `n"
setx WSLENV USERPROFILE/up

exit 0
{{ end -}}
